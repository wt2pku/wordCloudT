add2(3, 5)
source('S:/14Summer/Rprogramming/coursera/add2.R')
add2(3,5)
add2 <- function(x, y) {
x + y
}
above10 <- function(x) {
use <- x>10
x[use]
}
above <- function(x, n) {
use <- x>n
x[use]
}
x <- 1:20
above(x,12)
source('S:/14Summer/Rprogramming/coursera/add2.R')
above(x)
source('S:/14Summer/Rprogramming/coursera/add2.R')
colummnmean(airquality)
columnmean(airquality)
source('S:/14Summer/Rprogramming/coursera/add2.R')
columnmean(airquality)
install.packages("knitr")
library(knitr)
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("rgl")
install.packages("rmarkdwon")
render("regression_project.Rmd", "pdf_document")
cabal install pandoc
library(knitr)
pandoc('regression_project.md', format = 'latex')
install.packages("pandoc")
library(pandoc)
install.packages("C:/Users/twcv8/Downloads/pandoc-1.12.4.2-osx.zip", repos = NULL)
install.packages("S:/14Summer/regression/pandoc-1.12.4.2.zip", repos = NULL)
install.packages("shiny")
libray(shiny)
library(shiny)
setwd("S:/14Summer/dataPro/project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("tm")
runApp()
install.packages("wordcloud")
runApp()
install.packages("memoise")
runApp()
runApp()
install.packages("shinyIncubator")
install.packages("shinyIncubator")
runApp()
install.packages(c("AppliedPredictiveModeling", "ggplot2", "markdown", "mime", "Rcpp", "reshape2", "swirl", "yaml"))
install.packages("shinyIncubator")
install.packages("devtools")
library("devtools")
devtools::install_github("shiny-incubator", "rstudio")
runApp()
library("shiny")
runApp()
runApp()
runApp()
install.packages("twitteR")
install.packages("Rcurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RJSONIO")
install.packages("strinr")
install.packages("stringr")
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(c("devtools", "rjson", "bit64", "httr"))
install.packages(c("devtools", "rjson", "bit64", "httr"))
library(devtools)
install_github("twitteR", username="daisywang0")
library(twitteR)
library(devtools)
install_github("cloudT", username="wt2pku")
api_key <- "GePrVvnw0tysHBTXPO1nbVov7"
api_secret <- "z0qG4Mk2S4bDAaOyMa8FkAbltbCyVLVZZ73139VNae5obdqZR1"
access_token <- "222338872-cicb0nf7xST4PG3mzeg0XYv5wc2jebfqDZJXRLEa"
access_token_secret <- "IGNXWjCBZ7rCdBPU857jlyHeaM0N0MykVfNICXAluBzHm"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
library(twitteR)
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
library("httr")
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
library("twitteR")
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
library(twitteR)
library(httr)
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
??setup_twitter_oauth
?setup_twitter_oauth
library(stringr)
library(RCurl)
library(RJSONIO)
library(digest)
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
install_github('twitteR', username='goeffjentry')
install_github('twitteR', username='goeffjentry')
library(devtools)
install_github('twitteR', username='goeffjentry')
devtools::install_github("twitteR", "goeffjentry")
install_github("twitteR", username="geoffjentry")
library(twitteR)
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
searchTwitter("iphone")
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
searchTwitter("iPhone", 20, lang="en")
runApp()
runApp()
runApp()
runApp()
runApp()
text <- readLines("summer.txt",
#encoding="UTF-8")
)
text <- readLines("summer.txt",
encoding="UTF-8")
dim(text)
head(text)
tweets = searchTwitter("iPhone", 100, lang="en")
head(tweets)
# get text
tweet_txt <- sapply(tweets, function(x) x$getText())
# clean text
tweet_clean <- clean.text(tweet_txt)
tweet_num <- length(tweet_clean)
#  create a dataframe where we can save all our data in like the tweet text and the results of the sentiment analysis
tweet_df <- data.frame(text=tweet_clean, sentiment=rep("", tweet_num),stringsAsFactors=FALSE)
# delete rows with no sentiment
tweet_df <- tweet_df[tweet_df$sentiment!="",]
# apply function getSentiment
sentiment <- rep(0, tweet_num)
for (i in 1:tweet_num)
{
tmp <- getSentiment(tweet_clean[i], "baa0a4b54059310466150b0e24110a4")
tweet_df$sentiment[i] <- tmp$sentiment
print(paste(i," of ", tweet_num))
}
#separate text by sentiment
sents <- levels(factor(tweet_df$sentiment))
# get the labels and percents
labels <- lapply(sents, function(x) paste(x,format(round((length((tweet_df[tweet_df$sentiment ==x,])$text)/length(tweet_df$sentiment)*100),2),nsmall=2),"%"))
nemo = length(sents)
emo.docs = rep("", nemo)
for (i in 1:nemo)
{
tmp = tweet_df[tweet_df$sentiment == sents[i],]$text
emo.docs[i] = paste(tmp,collapse=" ")
}
head(emo.docs)
tweet_df
dim(tweet_clean)
tweet_clean
text
tweet_clean <- removewords(tweet_clean, stopwords("english"))
tweet_clean <- removeWords(tweet_clean, stopwords("english"))
tweet_clean
library(shiny)
runApp()
runApp()
myCorpus = Corpus(VectorSource(tweet_clean))
myCorpus = tm_map(myCorpus, tolower)
myDTM = TermDocumentMatrix(myCorpus,
control = list(minWordLength = 1))
m = as.matrix(myDTM)
v <- m()
myDTM = TermDocumentMatrix(myCorpus,
control = list(minWordLength = 1))
m <- as.matrix(myDTM)
v <- m()
wordcloud_rep <- repeatable(wordcloud)
wordcloud_rep(names(m), m, scale=c(4,0.5),
min.freq = 2, max.words=10,
colors=brewer.pal(8, "Dark2"))
names(m)
myDTM
names(myDTM)
m <- as.matrix(myDTM)
m
tail(m)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
deployApp()
shinyapps::setAccountInfo(name='wt2pku', token='AFA135752B572FD32E4D2CEB954D0DED', secret='ZKrj4T6qaqK9b+hx1H7Ev+XX2cRdohRiN5iQ8Tzs')
deployApp()
api_key
api_secret
acess_token
access_token
access_token_secret
deployApp()
deployApp()
?deployApp
runApp()
runApp()
deployApp()
deployApp()
runApp()
wd()
setwd("S:\14Summer\dataPro\project")
wd
deployApp("S:\14Summer\dataPro\project")
deployApp("S:/14Summer/dataPro/project")
setwd("S:/14Summer/dataPro/project")
deployApp()
shinyapps::setAccountInfo(name='wt2pku', token='AFA135752B572FD32E4D2CEB954D0DED', secret='ZKrj4T6qaqK9b+hx1H7Ev+XX2cRdohRiN5iQ8Tzs')
library(shiny)
shinyapps::setAccountInfo(name='wt2pku', token='AFA135752B572FD32E4D2CEB954D0DED', secret='ZKrj4T6qaqK9b+hx1H7Ev+XX2cRdohRiN5iQ8Tzs')
deployApp()
deployApp()
deployApp()
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
?deployApp
deployApp(appName = "wordCloudTwitter")
deployApp(appName = "wordCloudTwitter")
runApp()
runApp()
runApp()
runApp()
deployApp(appName = "wordCloudTwitter")
install.packages("devtools")
install_github('slidify', 'ramnathv')
install_github('slidifyLIbraries', 'ramnathv')
library(slidify)
author("wordClouTwitter")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
library(shiny)
library(shinyIncubator)
library(twitteR)
library(RCurl)
library(RJSONIO)
library(stringr)
library(tm)
library(wordcloud)
library(memoise)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
publish_github(wt2pku, wordCloudT)
